{"ast":null,"code":"import SequentialIDGenerator from \"./sequential-id-generator\";\nimport sortMq from \"./sort-css-media-queries\";\nexport class MultiCache {\n  constructor(idGenerator, onNewCache, onNewValue) {\n    this.idGenerator = idGenerator;\n    this.onNewCache = onNewCache;\n    this.onNewValue = onNewValue;\n    this.sortedCacheKeys = [];\n    this.caches = {};\n  }\n  getCache(key) {\n    if (!this.caches[key]) {\n      const cache = new Cache(this.idGenerator, this.onNewValue);\n      cache.key = key;\n      this.sortedCacheKeys.push(key);\n      this.sortedCacheKeys.sort(sortMq);\n      const keyIndex = this.sortedCacheKeys.indexOf(key);\n      const insertBeforeMedia = keyIndex < this.sortedCacheKeys.length - 1 ? this.sortedCacheKeys[keyIndex + 1] : void 0;\n      this.caches[key] = cache;\n      this.onNewCache(key, cache, insertBeforeMedia);\n    }\n    return this.caches[key];\n  }\n  getSortedCacheKeys() {\n    return this.sortedCacheKeys;\n  }\n}\nexport class Cache {\n  constructor(idGenerator, onNewValue) {\n    this.cache = {};\n    this.idGenerator = idGenerator;\n    this.onNewValue = onNewValue;\n  }\n  addValue(key, value) {\n    const cached = this.cache[key];\n    if (cached) {\n      return cached;\n    }\n    const id = this.idGenerator.next();\n    this.cache[key] = id;\n    this.onNewValue(this, id, value);\n    return id;\n  }\n}","map":{"version":3,"sources":["src/cache.ts"],"names":["SequentialIDGenerator","sortMq","MultiCache","constructor","idGenerator","onNewCache","onNewValue","sortedCacheKeys","caches","getCache","key","cache","Cache","push","sort","keyIndex","indexOf","insertBeforeMedia","length","getSortedCacheKeys","addValue","value","cached","id","next"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,2BAAlC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AASA,OAAO,MAAMC,UAAN,CAAoB;EASzBC,WAAW,CACTC,WADS,EAETC,UAFS,EAGTC,UAHS,EAIT;IACA,IAAA,CAAKF,WAAL,GAAmBA,WAAnB;IACA,IAAA,CAAKC,UAAL,GAAkBA,UAAlB;IACA,IAAA,CAAKC,UAAL,GAAkBA,UAAlB;IACA,IAAA,CAAKC,eAAL,GAAuB,EAAvB;IACA,IAAA,CAAKC,MAAL,GAAc,CAAA,CAAd;EACD;EAEDC,QAAQ,CAACC,GAAD,EAAwB;IAC9B,IAAI,CAAC,IAAA,CAAKF,MAAL,CAAYE,GAAZ,CAAL,EAAuB;MACrB,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,IAAA,CAAKR,WAAf,EAA4B,IAAA,CAAKE,UAAjC,CAAd;MACAK,KAAK,CAACD,GAANC,GAAYD,GAAZC;MACA,IAAA,CAAKJ,eAAL,CAAqBM,IAArB,CAA0BH,GAA1B,CAAA;MACA,IAAA,CAAKH,eAAL,CAAqBO,IAArB,CAA0Bb,MAA1B,CAAA;MACA,MAAMc,QAAQ,GAAG,IAAA,CAAKR,eAAL,CAAqBS,OAArB,CAA6BN,GAA7B,CAAjB;MACA,MAAMO,iBAAiB,GACrBF,QAAQ,GAAG,IAAA,CAAKR,eAAL,CAAqBW,MAArB,GAA8B,CAAzCH,GACI,IAAA,CAAKR,eAAL,CAAqBQ,QAAQ,GAAG,CAAhC,CADJA,GAEI,KAAK,CAHX;MAIA,IAAA,CAAKP,MAAL,CAAYE,GAAZ,CAAA,GAAmBC,KAAnB;MACA,IAAA,CAAKN,UAAL,CAAgBK,GAAhB,EAAqBC,KAArB,EAA4BM,iBAA5B,CAAA;IACD;IACD,OAAO,IAAA,CAAKT,MAAL,CAAYE,GAAZ,CAAP;EACD;EAEDS,kBAAkB,CAAA,EAAG;IACnB,OAAO,IAAA,CAAKZ,eAAZ;EACD;AAxCwB;AA2C3B,OAAO,MAAMK,KAAN,CAAe;EAQpBT,WAAW,CACTC,WADS,EAETE,UAFS,EAGT;IACA,IAAA,CAAKK,KAAL,GAAa,CAAA,CAAb;IACA,IAAA,CAAKP,WAAL,GAAmBA,WAAnB;IACA,IAAA,CAAKE,UAAL,GAAkBA,UAAlB;EACD;EAEDc,QAAQ,CAACV,GAAD,EAAcW,KAAd,EAAwB;IAC9B,MAAMC,MAAM,GAAG,IAAA,CAAKX,KAAL,CAAWD,GAAX,CAAf;IACA,IAAIY,MAAJ,EAAY;MACV,OAAOA,MAAP;IACD;IACD,MAAMC,EAAE,GAAG,IAAA,CAAKnB,WAAL,CAAiBoB,IAAjB,CAAA,CAAX;IACA,IAAA,CAAKb,KAAL,CAAWD,GAAX,CAAA,GAAkBa,EAAlB;IACA,IAAA,CAAKjB,UAAL,CAAgB,IAAhB,EAAsBiB,EAAtB,EAA0BF,KAA1B,CAAA;IACA,OAAOE,EAAP;EACD;AA1BmB","sourcesContent":["import SequentialIDGenerator from \"./sequential-id-generator\";\nimport sortMq from \"./sort-css-media-queries\";\n\ntype OnNewCacheFn<T> = (\n  key: string,\n  cache: Cache<T>,\n  value?: string | null,\n) => any;\ntype OnNewValueFn<T> = (cache: Cache<T>, id: string, value: T) => any;\n\nexport class MultiCache<T> {\n  caches: {\n    [x: string]: Cache<T>;\n  };\n  idGenerator: SequentialIDGenerator;\n  onNewCache: OnNewCacheFn<T>;\n  onNewValue: OnNewValueFn<T>;\n  sortedCacheKeys: string[];\n\n  constructor(\n    idGenerator: SequentialIDGenerator,\n    onNewCache: OnNewCacheFn<T>,\n    onNewValue: OnNewValueFn<T>,\n  ) {\n    this.idGenerator = idGenerator;\n    this.onNewCache = onNewCache;\n    this.onNewValue = onNewValue;\n    this.sortedCacheKeys = [];\n    this.caches = {};\n  }\n\n  getCache(key: string): Cache<T> {\n    if (!this.caches[key]) {\n      const cache = new Cache(this.idGenerator, this.onNewValue);\n      cache.key = key;\n      this.sortedCacheKeys.push(key);\n      this.sortedCacheKeys.sort(sortMq);\n      const keyIndex = this.sortedCacheKeys.indexOf(key);\n      const insertBeforeMedia =\n        keyIndex < this.sortedCacheKeys.length - 1\n          ? this.sortedCacheKeys[keyIndex + 1]\n          : void 0;\n      this.caches[key] = cache;\n      this.onNewCache(key, cache, insertBeforeMedia);\n    }\n    return this.caches[key];\n  }\n\n  getSortedCacheKeys() {\n    return this.sortedCacheKeys;\n  }\n}\n\nexport class Cache<T> {\n  cache: {\n    [x: string]: string;\n  };\n  idGenerator: SequentialIDGenerator;\n  key: string;\n  onNewValue: (cache: Cache<T>, id: string, value: any) => any;\n\n  constructor(\n    idGenerator: SequentialIDGenerator,\n    onNewValue: (cache: Cache<T>, id: string, value: any) => any,\n  ) {\n    this.cache = {};\n    this.idGenerator = idGenerator;\n    this.onNewValue = onNewValue;\n  }\n\n  addValue(key: string, value: T) {\n    const cached = this.cache[key];\n    if (cached) {\n      return cached;\n    }\n    const id = this.idGenerator.next();\n    this.cache[key] = id;\n    this.onNewValue(this, id, value);\n    return id;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}