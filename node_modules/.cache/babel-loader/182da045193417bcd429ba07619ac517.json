{"ast":null,"code":"import hyphenate from \"./hyphenate-style-name\";\nimport validateKeyframesObject from \"./validate-keyframes-object\";\nexport function atomicSelector(id, pseudo) {\n  let selector = \".\".concat(id);\n  if (pseudo) {\n    selector += pseudo;\n  }\n  return selector;\n}\nexport function keyframesToBlock(keyframes) {\n  if (process.env.NODE_ENV !== \"production\") {\n    validateKeyframesObject(keyframes);\n  }\n  if (process.env.NODE_ENV !== \"production\" && typeof Object.getPrototypeOf(keyframes) !== \"undefined\") {\n    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Only plain objects should be used as animation values. Unexpectedly recieved:\", keyframes);\n    }\n  }\n  let result = \"\";\n  for (const animationState in keyframes) {\n    result += \"\".concat(animationState, \"{\").concat(declarationsToBlock(keyframes[animationState]), \"}\");\n  }\n  return result;\n}\nexport function declarationsToBlock(style) {\n  let css = \"\";\n  for (const prop in style) {\n    const val = style[prop];\n    if (typeof val === \"string\" || typeof val === \"number\") {\n      css += \"\".concat(hyphenate(prop), \":\").concat(val, \";\");\n    }\n  } // trim trailing semicolon\n\n  return css.slice(0, -1);\n}\nexport function keyframesBlockToRule(id, block) {\n  return \"@keyframes \".concat(id, \"{\").concat(block, \"}\");\n}\nexport function fontFaceBlockToRule(id, block) {\n  return \"@font-face{font-family:\".concat(id, \";\").concat(block, \"}\");\n}\nexport function styleBlockToRule(selector, block) {\n  return \"\".concat(selector, \"{\").concat(block, \"}\");\n}","map":{"version":3,"sources":["src/css.ts"],"names":["hyphenate","validateKeyframesObject","atomicSelector","id","pseudo","selector","keyframesToBlock","keyframes","Object","getPrototypeOf","console","warn","result","animationState","declarationsToBlock","style","css","prop","val","slice","keyframesBlockToRule","block","fontFaceBlockToRule","styleBlockToRule"],"mappings":"AAEA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,uBAAP,MAAoC,6BAApC;AAEA,OAAO,SAASC,cAAT,CAAwBC,EAAxB,EAAoCC,MAApC,EAA4D;EACjE,IAAIC,QAAQ,OAAA,MAAA,CAAOF,EAAG,CAAtB;EACA,IAAIC,MAAJ,EAAY;IACVC,QAAQ,IAAID,MAAZC;EACD;EACD,OAAOA,QAAP;AACD;AAED,OAAO,SAASC,gBAAT,CAA0BC,SAA1B,EAAiE;EACtE,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,EAAa;IACXN,uBAAuB,CAACM,SAAD,CAAvBN;EACD;EACD,IAAI,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,IAAW,OAAOO,MAAM,CAACC,cAAPD,CAAsBD,SAAtBC,CAAP,KAA4C,WAA3D,EAAwE;IACtE,IAAIA,MAAM,CAACC,cAAPD,CAAsBD,SAAtBC,CAAAA,KAAqCA,MAAM,CAACC,cAAPD,CAAsB,CAAA,CAAtBA,CAAzC,EAAoE;MAClE;MACAE,OAAO,CAACC,IAARD,CACE,+EADFA,EAEEH,SAFFG,CAAAA;IAID;EACF;EACD,IAAIE,MAAM,GAAG,EAAb;EACA,KAAK,MAAMC,cAAX,IAA6BN,SAA7B,EAAwC;IACtCK,MAAM,OAAA,MAAA,CAAOC,cAAe,OAAA,MAAA,CAAGC,mBAAmB,CAChDP,SAAS,CAACM,cAAD,CADuC,CAEhD,MAFFD;EAGD;EACD,OAAOA,MAAP;AACD;AAED,OAAO,SAASE,mBAAT,CAA6BC,KAA7B,EAAiD;EACtD,IAAIC,GAAG,GAAG,EAAV;EACA,KAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;IACxB,MAAMG,GAAG,GAAGH,KAAK,CAACE,IAAD,CAAjB;IACA,IAAI,OAAOC,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;MACtDF,GAAG,OAAA,MAAA,CAAOhB,SAAS,CAACiB,IAAD,CAAO,OAAA,MAAA,CAAGC,GAAI,MAAjCF;IACD;EACF,CAPqD,CAQtD;;EACA,OAAOA,GAAG,CAACG,KAAJH,CAAU,CAAVA,EAAa,CAAC,CAAdA,CAAP;AACD;AAED,OAAO,SAASI,oBAAT,CAA8BjB,EAA9B,EAA0CkB,KAA1C,EAAiE;EACtE,qBAAA,MAAA,CAAqBlB,EAAG,OAAA,MAAA,CAAGkB,KAA3B;AACD;AAED,OAAO,SAASC,mBAAT,CAA6BnB,EAA7B,EAAyCkB,KAAzC,EAAgE;EACrE,iCAAA,MAAA,CAAiClB,EAAG,OAAA,MAAA,CAAGkB,KAAvC;AACD;AAED,OAAO,SAASE,gBAAT,CAA0BlB,QAA1B,EAA4CgB,KAA5C,EAAmE;EACxE,UAAA,MAAA,CAAUhB,QAAS,OAAA,MAAA,CAAGgB,KAAtB;AACD","sourcesContent":["declare var __DEV__: boolean;\n\nimport hyphenate from \"./hyphenate-style-name\";\nimport validateKeyframesObject from \"./validate-keyframes-object\";\n\nexport function atomicSelector(id: string, pseudo: string): string {\n  let selector = `.${id}`;\n  if (pseudo) {\n    selector += pseudo;\n  }\n  return selector;\n}\n\nexport function keyframesToBlock(keyframes: {[x: string]: any}): string {\n  if (__DEV__) {\n    validateKeyframesObject(keyframes);\n  }\n  if (__DEV__ && typeof Object.getPrototypeOf(keyframes) !== \"undefined\") {\n    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"Only plain objects should be used as animation values. Unexpectedly recieved:\",\n        keyframes,\n      );\n    }\n  }\n  let result = \"\";\n  for (const animationState in keyframes) {\n    result += `${animationState}{${declarationsToBlock(\n      keyframes[animationState],\n    )}}`;\n  }\n  return result;\n}\n\nexport function declarationsToBlock(style: any): string {\n  let css = \"\";\n  for (const prop in style) {\n    const val = style[prop];\n    if (typeof val === \"string\" || typeof val === \"number\") {\n      css += `${hyphenate(prop)}:${val};`;\n    }\n  }\n  // trim trailing semicolon\n  return css.slice(0, -1);\n}\n\nexport function keyframesBlockToRule(id: string, block: string): string {\n  return `@keyframes ${id}{${block}}`;\n}\n\nexport function fontFaceBlockToRule(id: string, block: string): string {\n  return `@font-face{font-family:${id};${block}}`;\n}\n\nexport function styleBlockToRule(selector: string, block: string): string {\n  return `${selector}{${block}}`;\n}\n"]},"metadata":{},"sourceType":"module"}